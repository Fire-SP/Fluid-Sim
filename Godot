extends Node2D
#setup noise
var noise = OpenSimplexNoise.new()

var map_size = 100
var size = 5
#var rain = false
var air = []
var heightmap = []
var countlist = []
var finallist = []


func _ready():
	randomize()
	noise.seed = randi()
	noise.octaves = 4
	noise.period = 35
	noise.persistence = 0.8
	generate_map()


func _process(delta):
	update_tiles()
	update()


func update_tiles():
	for i in finallist:
		for j in finallist:
			var old_air = air[i][j]
			if i == 0 or i == (map_size-1) or j == 0 or j == (map_size-1):
		        var d1 = 255

			else:
				var d1 = [heightmap[i][j-1]+air[i][j-1], heightmap[i][j+1]+air[i][j+1], heightmap[i-1][j]+air[i-1][j], heightmap[i+1][j]+air[i+1][j],
		              heightmap[i-1][j-1]+air[i-1][j-1],heightmap[i+1][j-1]+air[i+1][j-1],heightmap[i-1][j+1]+air[i-1][j+1],heightmap[i+1][j+1]+air[i+1][j+1],heightmap[i][j]+air[i][j]]

				var target_location = 10000
				for k in range(0,8):
					target_location = min(target_location,d1[k])

				for k in range(0,8):
					if int(target_location) == int(d1[k]):
						target_location = k
					#print("d1: ",d1[k]," TL: ", target_location)

				if heightmap[i][j] >= target_location and air[i][j] != 0:
					if target_location == 0:
						air[i][j] -= air[i][j]/2
						air[i][j-1] += air[i][j]

					if target_location == 1:
		                air[i][j] -= air[i][j]/2
		                air[i][j+1] += air[i][j]

					if target_location == 2:
		                air[i][j] -= air[i][j]/2
		                air[i-1][j] += air[i][j]

					if target_location == 3:
		                air[i][j] -= air[i][j]/2
		                air[i+1][j] += air[i][j]

					if target_location == 4:
		                air[i][j] -= air[i][j]/2
		                air[i-1][j-1] += air[i][j]

					if target_location == 5:
		                air[i][j] -= air[i][j]/2
		                air[i+1][j-1] += air[i][j]

					if target_location == 6:
		                air[i][j] -= air[i][j]/2
		                air[i-1][j+1] += air[i][j]

					if target_location == 7:
		                air[i][j] -= air[i][j]/2
		                air[i+1][j+1] += air[i][j]

					if target_location == 8:
		                return

			if old_air == air[i][j]:
				var a1 = [air[i][j-1], air[i][j+1], air[i-1][j], air[i+1][j],air[i-1][j-1],air[i+1][j-1],air[i-1][j+1],air[i+1][j+1]]
				var target_location2 = 10000
				for k in range(0,8):
					target_location2 = min(target_location2,a1[k])

				if air[i][j-1] <= air[i][j]:
		            if target_location2 == 0:
		                air[i][j] -= air[i][j]/2
		                air[i][j-1] += air[i][j]

				if air[i][j+1] <= air[i][j]:
		            if target_location2 == 1:
		                air[i][j] -= air[i][j]/2
		                air[i][j+1] += air[i][j]

				if air[i-1][j] <= air[i][j]:
		            if target_location2 == 2:
		                air[i][j] -= air[i][j]/2
		                air[i-1][j] += air[i][j]

				if air[i+1][j] <= air[i][j]:
		            if target_location2 == 3:
		                air[i][j] -= air[i][j]/2
		                air[i+1][j] += air[i][j]

				if air[i-1][j-1] <= air[i][j]:
		            if target_location2 == 4:
		                air[i][j] -= air[i][j]/2
		                air[i-1][j-1] += air[i][j]

				if air[i+1][j-1] <= air[i][j]:
		            if target_location2 == 5:
		                air[i][j] -= air[i][j]/2
		                air[i+1][j-1] += air[i][j]

				if air[i-1][j+1] <= air[i][j]:
		            if target_location2 == 6:
		                air[i][j] -= air[i][j]/2
		                air[i-1][j+1] += air[i][j]

				if air[i+1][j+1] <= air[i][j]:
		            if target_location2 == 7:
		                air[i][j] -= air[i][j]/2
		                air[i+1][j+1] += air[i][j]
						


func generate_map():
	for i in range(map_size+1):
		air.append([])
		heightmap.append([])
		countlist.append(i)
		for j in range(map_size+1):
            var height = (noise.get_noise_2d(i,j)*20)
            height += 45 + (rand_range(0,2500)/10000)
            heightmap[i].append(abs(height))
            air[i].append(rand_range(0,10))

	for i in range(map_size+1):
		var temp = randi()%countlist.size()
		finallist.append(countlist[temp])
		countlist.remove(temp)





func _draw():
	for i in range(map_size):
		for j in range(map_size):
			var aircolor = (air[j][i]/1.5)
			var heightcolor = ((heightmap[j][i])-44)/20
			if int(heightcolor) > 255:
		        heightcolor = 255
			if aircolor > 0.9:
		        aircolor= rand_range(0.9,1)
			var x = j*size+size
			var y = i*size+size
			#draw_line(Vector2(j*size,i*size),Vector2((j+size),(i+size)),Color(0.2,heightcolor,aircolor))
			draw_rect(Rect2(j*size,i*size,x,y),Color(0.2,heightcolor,aircolor))




